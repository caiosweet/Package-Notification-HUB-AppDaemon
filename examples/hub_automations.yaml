#----------------------------------------------------------------------------------------------------#
# ESEMPI DI COME CREARE DELLE AUTOMAZIONI CON I RICHIAMI ALLE MACRO
#----------------------------------------------------------------------------------------------------#
automation:
  #----------------------------------------------------------------------------------------------------#
  # Hassio Start
  #----------------------------------------------------------------------------------------------------#
  - id: notifica_di_avvio_hub
    alias: Notifica di avvio
    initial_state: true
    trigger:
    - platform: homeassistant
      event: start
    action:
    - service: homeassistant.update_entity
      entity_id: sensor.ha_start
    - delay: 00:00:15
    - service: script.my_notify
      data_template:
        title: "Hassio Start!"
        message: >-
          Il sistema è operativo!.
          {{states('sensor.ha_start')}}
        message_tts: >-
          Il sistema è operativo!.

  #----------------------------------------------------------------------------------------------------#
  # Hassio Shtudown
  #----------------------------------------------------------------------------------------------------#
  - id: Shut Down HUB
    alias: Shut Down
    initial_state: true
    trigger:
      # - platform: homeassistant
      #   event: shutdown
      # - event_type: homeassistant.restart
      #   platform: event

      # Trigger su evento restart, per dare il tempo ad AppDaemon di notificare
      - platform: event
        event_type: call_service
        event_data:
          domain: homeassistant
          service: restart
    action:
      - service: script.my_notify
        data:
          title: "Hassio Shutdown!"
          call_no_annuncio: 1
          call_arrivederci: 1
          call_spegni: 1
          alexa_type: "tts"
          volume: 0.3
          # notify: 0

  #----------------------------------------------------------------------------------------------------#
  # Accesso Fallito
  #----------------------------------------------------------------------------------------------------#
  - id: accesso_fallito_hub
    alias: "Accesso fallito"
    initial_state: true
    trigger:
      - platform: state
        entity_id: persistent_notification.http_login
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state != 'None' }}"
    action:
      - service: script.my_notify
        data_template:
          title: "Hassio Accesso Fallito. "
          message_tts: "Attenzione. Accesso Fallito"
          # message: "{{ states.persistent_notification.http_login.attributes.message }}"
          message: "Tentativo di accesso o richiesta con autenticazione non valida."
          link: >-
            http://www.ip-tracker.org/locator/ip-lookup.php?ip={{states.persistent_notification.http_login.attributes.message.split('from ')[1]}}
          # notify: alert
          priority: 1

      #- service: persistent_notification.dismiss
        #data:
          #notification_id: 'http_login'
      - service: notify.pushover
        data_template: 
          title: "Hassio Accesso Fallito"
          message: "Accesso Fallito. "
          url: >
            https://whatismyipaddress.com/ip/{{states.persistent_notification.http_login.attributes.message.split('from ')[1]}}
          priority: 1
          #attachment: "http://example.com/image.png"
          #sound: pianobar
          #device: pixel

  #----------------------------------------------------------------------------------------------------#
  # Nuova versione di Hass.io
  #----------------------------------------------------------------------------------------------------#
  - id: update_hassio_hub
    alias: Update hassio hub
    initial_state: true
    trigger:
      # - platform: state
      #   entity_id: updater.updater
      - platform: state
        entity_id: binary_sensor.updater
        to: 'on'
    action:
      - service: script.my_notify
        data_template:
          title: "Nuovo Aggiornamento Hassio"
          message: "Home Assistant {{state_attr('binary_sensor.updater','newest_version')}} è disponibile."
          link: "{{state_attr('binary_sensor.updater','release_notes')}}"

  #----------------------------------------------------------------------------------------------------#
  # Benvenuto # Esempio Macro elaborata al di fuori di build_message, dove al suo interno va inserito {{ benvenuto }}
  #----------------------------------------------------------------------------------------------------#
  - id: Benvenuto HUB
    alias: Benvenuto
    initial_state: true
    trigger:
      - platform: state
        entity_id: !secret location_tracker_hub
        from: 'not_home'
        to: 'home'
        for: '00:02:00'
    action:
      - service: script.my_notify
        data_template:
          call_no_annuncio: 1
          alexa_type: "announce"
          alexa_method: "speak"
          title: Benvenuto
          benvenuto: >
            {% set person = trigger.entity_id.split('.')[1]|replace('_', ' ') %}
            {%- macro benvenuto(person) -%}
            {{ [
            "Bentornato a casa " ~person~" ",
            "Indovina chi è a casa? è " ~person~" ",
            person + " è ora in casa. ",
            "Benvenuto a casa " ~person~". Ci sei mancato. ",
            "La nostra casa è ora completa, riposati e rilassati!. Bentornato " ~person~" ",
            "La vita è come una canzone, sei di nuovo al posto tuo. Benvenuto a casa " ~person~" ",
            "Ehilà!. " ~person~ " Benvenuto a casa!. ",
            "Toc toc. Chi c'è qui? è " ~person~" ",
            person~ "!. Tu sei a casa!.",
            "Conosco un segreto!. " ~person~ " è a casa!. ",
            "Sto percependo un disturbo nella forza.. " ~person~ " deve essere a casa!. ",
            "E la casa diventa una casa. Bentornato. " ~person~" ",
            person~ " è qui ora. Benvenuto a casa. ",
            person~ " è ora qui. ",
            "Solo un piccolo annuncio. " ~person~ " è arrivato!. ",
            "Perdonate l'interruzione, ma " ~person~ " è a casa!. ",
            "I miei sistemi stanno rilevando la presenza di ulteriori umani. " ~person~ " è stato identificato come: in casa. "
            "Bentornato "~person~"!. La casa si sta attivando!. ",
            "Benvenuto a casa "~person~"!. È bello rivederti!. Lasciami accendere la casa. ",
            "Beh, sembra che "~person~" sia finalmente a casa!. Preparerò la casa per te. ",
            "È bello vedere che sei tornato sano e salvo "~person~"!. Lasciami aprire la porta e preparare la casa. ",
            "Fantastico, "~person~" è tornato!. Permettimi di preparare la casa per te. "
            ] | random }}
            {%- endmacro -%}
            {{ benvenuto(person) }}

  #----------------------------------------------------------------------------------------------------#
  # Bentronato # Esempio Call di Bentornato [ if call_bentornato == 1 Macro {{ bentornato(person) }} ]
  #----------------------------------------------------------------------------------------------------#
  - id: Bentornato HUB
    alias: Bentornato
    initial_state: true
    trigger:
      - platform: state
        entity_id: !secret location_tracker_hub
        from: 'not_home'
        to: 'home'
        for: '00:02:00'
    action:
      - service: script.my_notify
        data_template:
          call_no_annuncio: 1
          call_bentornato: 1
          alexa_type: "announce"
          alexa_method: "all"
          title: Bentornato
          person: >-
            {{ trigger.to_state.attributes.friendly_name }}

  #----------------------------------------------------------------------------------------------------#
  # Lavoro/Zone # Esempio Call di Inizio/Fine lavoro [ if call_fine_lavoro == 1 {{ fine_lavoro(person) }} ]
  #----------------------------------------------------------------------------------------------------#
  - id: notifica_inizio_lavoro_hub
    alias: Notifica Inzio Lavoro
    initial_state: true
    trigger:
      platform: state
      entity_id: !secret location_tracker_hub
      to: "Lavoro"
    action:
      - service: script.my_notify
        data_template:
          call_no_annuncio: 1
          call_inizio_lavoro: 1
          title: "In Ufficio"
          alexa_type: "tts"
          person: >-
            {{ trigger.to_state.attributes.friendly_name }}

  - id: notifica_fine_lavoro_hub
    alias: Notifica Fine Lavoro
    initial_state: true
    trigger:
      platform: state
      entity_id: !secret location_tracker_hub
      from: "Lavoro"
      to: "not_home"
    action:
      - service: script.my_notify
        data_template:
          call_no_annuncio: 1
          call_fine_lavoro: 1
          title: "Fine Lavoro"
          alexa_type: "tts"
          person: >-
            {{ trigger.to_state.attributes.friendly_name }}

  #----------------------------------------------------------------------------------------------------#
  # Nuovo Dispositivo Connesso
  #----------------------------------------------------------------------------------------------------#
  - id: Nuovo Dispositivo Connesso HUB
    alias: Nuovo Dispositivo Connesso
    initial_state: true
    trigger:
      - platform: event
        event_type: device_tracker_new_device
    action:
      - service: notify.pushover
        data:
          title: New device
        data_template:
          message: >
            New device: {{trigger.event.data.host_name}}
            entity: {{trigger.event.data.entity_id}}
            mac: ({{ trigger.event.data.mac }})
      - service: script.my_notify
        data_template:
          call_nuovo_dispositivo: 1
          alexa_type: "tts"
          title: "Nuovo Dispositivo"
          person: >-
            {% if trigger.event.data.host_name != None %}
            {{ trigger.event.data.host_name }}
            {% else %}
            Sconosciuto
            {% endif %}

  #----------------------------------------------------------------------------------------------------#
  # Avvio Computer
  #----------------------------------------------------------------------------------------------------#
  - id: computer_on_hub
    alias: "Computer ON"
    initial_state: true
    trigger:
      platform: state
      entity_id: switch.computer
      to: 'on'
    action:
      service: script.my_notify
      data:
        title: "Computer attivo"
        message: "Il computer è attivo. "

  #----------------------------------------------------------------------------------------------------#
  # Condizioni Climatiche
  #----------------------------------------------------------------------------------------------------#
  - id: Condizioni Tempo Dopo Lavoro HUB
    alias: Condizioni Tempo Dopo Lavoro
    initial_state: true
    trigger:
      - platform: time
        at: '16:00:00'
    condition:
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
      - condition: and
        conditions:
          - condition: numeric_state
            entity_id: 'sensor.dark_sky_precip_intensity'
            above: 0.5
    action:
      - service: script.my_notify
        data_template:
          call_avviso_pioggia: 1
          evento: "Dopo Lavoro "
          alexa_type: "tts"
          sensore_pioggia: >-
            {{states.sensor.dark_sky_precip_intensity.state|round(2)~" "~states.sensor.dark_sky_precip_intensity.attributes.unit_of_measurement}}

  #----------------------------------------------------------------------------------------------------#
  # Buongiorno Info
  #----------------------------------------------------------------------------------------------------#
  - id: Buongiorno info HUB
    alias: Buongiorno info
    initial_state: true
    trigger:
      - platform: time
        at: '07:45:00'
    condition:
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
          - sat
    action:
      - service: script.my_notify
        data_template:
          alexa_type: "tts"
          message: >-
            Sono le {{states('sensor.time')}},
            ed è {{states('sensor.dark_sky_summary')}}. 
            La temperatura esterna è di {{states('sensor.dark_sky_apparent_temperature')|int|string }} gradi,
            mentre la temperatura interna è di {{states('sensor.temperatura_media') |int|string }} gradi. 
            *Previsioni.* {{ states.sensor.dark_sky_hourly_summary.state }}. 
            *Citazione. * {{state_attr('sensor.wikiquote', 'entries')[-1].summary|striptags}}.

  #----------------------------------------------------------------------------------------------------#
  # SEGUIMI - Imposta il Media Player in automatico
  #----------------------------------------------------------------------------------------------------#
  - id: seguimi_hub
    alias: Seguimi
    trigger:
      platform: state
      entity_id:
        - binary_sensor.motion_sensor_158d000222ccb7 #studio
        - binary_sensor.motion_sensor_158d0001e5cfdd #corridoio
      from: "off"
      to: "on"
    action:
      - service: input_select.select_option
        entity_id: input_select.notification_media_player_alexa
        data_template:
          option: >-
            {% if is_state("binary_sensor.motion_sensor_158d000222ccb7", "on") %}
            Studio
            {% elif is_state("binary_sensor.motion_sensor_158d0001e5cfdd", "on") %}
            Sala
            {% endif %}
      - service: input_select.select_option
        entity_id: input_select.notification_media_player_google
        data_template:
          option: >-
            {% if is_state("binary_sensor.motion_sensor_158d000222ccb7", "on") %}
            Red
            {% elif is_state("binary_sensor.motion_sensor_158d0001e5cfdd", "on") %}
            Black
            {% endif %}

  #----------------------------------------------------------------------------------------------------#
  # HACS - New Repo - by Joakim Sørensen (ludeeus)
  #----------------------------------------------------------------------------------------------------#
  - id: hacs_new_repo_hub
    alias: Create a notification when somethig is added to HACS
    trigger:
      platform: event
      event_type: hacs/repository
      event_data:
        action: registration
    condition:
      condition: template
      value_template: "{{ trigger.event.data.repository is defined }}"
    action:
      service: script.my_notify
      data_template:
        mute: 1
        title: Nuovo repository in HACS
        message: >-
          {% set repo = trigger.event.data.repository %}
          {% set id = trigger.event.data.repository_id %}
          [{{ repo }}](/hacs/repository/{{ id }})
          è stato appena aggiunto a HACS.

  #----------------------------------------------------------------------------------------------------#
  # HACS - Updates - by Joakim Sørensen (ludeeus)
  #----------------------------------------------------------------------------------------------------#
  - id: hacs_updates_hub
    alias: Create a notification when there is updates pending in HACS
    trigger:
      platform: state
      entity_id: sensor.hacs
    condition:
      - condition: template
        value_template: "{{ states(trigger.entity_id) != 'unknown'}}"
      - condition: template
        value_template: "{{ (states(trigger.entity_id) | float) != 0}}"
    action:
      service: script.my_notify
      data_template:
        # mute: 1
        title: Aggiornamenti in sospeso in HACS
        message: >-
          {% for repo in state_attr(trigger.entity_id, 'repositories') %}
            *{{ repo.display_name }}* _{{ repo["installed version"] }}_ -> _{{ repo["available version"] }}_
          {% endfor %}
        message_tts: >-
          {% for repo in state_attr(trigger.entity_id, 'repositories') %}
            Nuova versione per {{ repo.display_name }}.
          {% endfor %}

  #----------------------------------------------------------------------------------------------------#
  # HACS - Updater
  #----------------------------------------------------------------------------------------------------#
  # - id: hacs_updater_hub
  #   alias: "Notifica Aggiornamenti HACS"
  #   initial_state: true
  #   trigger:
  #     - platform: state
  #       entity_id: sensor.hacs
  #   condition:
  #     - condition: template
  #       value_template: "{{ trigger.to_state.state > trigger.from_state.state }}"
  #   action:
  #     - service: script.my_notify
  #       data_template:
  #         mute: 1
  #         title: "HACS"
  #         message: >-
  #           Aggiornamenti plug-in disponibili. 
  #           {%set hacs=state_attr('sensor.hacs','repositories')%}
  #           {%set hacs_num=states('sensor.hacs')|int%}
  #           {%for n in range(0,hacs_num)%}
  #           *{{state_attr('sensor.hacs','repositories')[n]['display_name']}}* {{state_attr('sensor.hacs','repositories')[n]['available version']}}
  #           {%if not loop.last%}-{%endif%}
  #           {%endfor%}.
