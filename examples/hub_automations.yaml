# package_hub_automations:
#----------------------------------------------------------------------------------------------------#
# ESEMPI AUTOMAZIONI 
#----------------------------------------------------------------------------------------------------#
automation:
  #----------------------------------------------------------------------------------------------------#
  # Home Assistant Start/Final Write/Close/Stop/Restart
  #----------------------------------------------------------------------------------------------------#
  - alias: Home Assistant Start Stop Hub
    description: "Notification Home Assistant Start/Final Write/Close/Stop/Restart"
    initial_state: true
    mode: queued
    max_exceeded: silent
    trigger:
      - platform: homeassistant
        event: start
      - platform: homeassistant
        event: shutdown
      - platform: event
        event_type: homeassistant_final_write
      - platform: event
        event_type: homeassistant_close
      - platform: event
        event_type: call_service
        event_data:
          domain: homeassistant
          service: restart
      - platform: event
        event_type: core_config_updated
    action:
      - variables:
          title: >
            {{ (trigger.description | regex_replace(find="\W|_|event", replace=" ") | trim | capitalize) 
            if trigger.description is defined else "TEST" }}
          time: "{{(now().time()|string)[:-4]}}"
          icon: >
            {% if 'stop' in title %}üõë
            {% elif 'final' in title %}üèÅ
            {% elif 'close' in title %}‚õî
            {% elif 'restart' in title %}üëçüëç
            {% elif 'start' in title %}üëç
            {% elif 'Call' in title %}üìû
            {% else %}‚ùó‚ùì
            {% endif %}
          notify_service: >-
            {% set DEFAULT_NOTIFY = states('input_select.text_notify') %}
            {{ (DEFAULT_NOTIFY|replace('notify.','')|regex_replace(find=" *, *", replace=",")|lower).rsplit(",") 
            if DEFAULT_NOTIFY is string else DEFAULT_NOTIFY }}
      - choose:
          - conditions: "{{ title != 'TEST' }}"
            sequence:
              - alias: "Repeat text notify"
                repeat:
                  while: "{{ repeat.index <= notify_service | length }}"
                  sequence:
                    - variables:
                        notify_name: "{{ notify_service[repeat.index -1] | replace(' ','_') | lower }}"
                    - service: "notify.{{ notify_name }}"
                      data:
                        title: "{{ icon }} {{ title }}"
                        message: |
                          ‚û° {{ time }}
                    - choose:
                        - conditions: "{{ 'start' in title }}"
                          sequence:
                            - service: homeassistant.update_entity
                              entity_id: 
                                - sensor.ha_start
                                - sensor.verifica_tempi_setup
                            - wait_for_trigger:
                                - platform: state
                                  entity_id: sensor.centro_notifiche
                                  to: "on"
                              timeout: 120
                              continue_on_timeout: true
                            - service: script.my_notify
                              data:
                                title: "HomeAssistant Start!"
                                notify: "notify.{{ notify_name }}"
                                message: |
                                  üì¨ Centro Notifiche operativo! üïµ
                                  üü© {{ states('sensor.ha_start') }}
                                alexa:
                                  message_tts: >-
                                    Il sistema √® operativo!.
                                  voice: Giorgio
                                  type: tts
                                google:
                                  message_tts: >-
                                    Il sistema √® operativo!.
                                  # media_content_type: sound
                                #   media_content_id: https://actions.google.com/sounds/v1/human_voices/human_fart.ogg
        default:
          - service: "notify.{{ (notify_service | default(['notify']))[0] | replace(' ','_') | lower }}"
            data:
              message: "DEFAULT: {{ icon }} {{ title }} {{ trigger | replace('_','\_') }} {{ this | replace('_','\_') }}"

  #----------------------------------------------------------------------------------------------------#
  # Accesso Fallito # Banned IP persistent_notification.ip_ban title: Banning IP address
  # message: Too many login attempts from xxx.xxx.xxx.xxx
  #----------------------------------------------------------------------------------------------------#
  - alias: Accesso Fallito Hub
    description: "Notification Message Too many login attempts"
    mode: queued
    initial_state: true
    trigger:
      - platform: state
        entity_id: persistent_notification.http_login
    condition: "{{ trigger.to_state.state != 'None' and trigger.to_state.entity_id is defined }}"
    action:
      - service: script.my_notify
        data:
          title: "‚õî Home Assistant Accesso Fallito. "
          message_tts: &tts_login "Attenzione. Accesso Fallito"
          message: "Tentativo di accesso o richiesta con autenticazione non valida."
          link: >-
            {% set message = state_attr('persistent_notification.http_login','message') %}
            {{ 'http://www.ip-tracker.org/locator/ip-lookup.php?ip=' ~ message.split('from ')[1] if message }}
          # notify: alert
          priority: 1
          alexa:
            message_tts: *tts_login

      - service: notify.pushover
        data:
          title: "‚õî Home Assistant Accesso Fallito"
          message: "Accesso Fallito. "
          data:
            url: >
              {% set message = state_attr('persistent_notification.http_login','message') %}
              {{ 'https://whatismyipaddress.com/ip/' ~ message.split('from ')[1] if message }}
            priority: 1
            #attachment: "http://example.com/image.png"
            #sound: pianobar
            #device: pixel

      #- service: persistent_notification.dismiss
      #data:
      #notification_id: 'http_login'

  #----------------------------------------------------------------------------------------------------#
  # Nuova versione di Home Assistant
  #----------------------------------------------------------------------------------------------------#
  - alias: Update Home Assistant Hub
    description: "Notification New Update for Home Assistant"
    initial_state: true
    trigger:
      # - platform: state
      #   entity_id: updater.updater
      - platform: state
        entity_id: binary_sensor.updater
        to: "on"
    action:
      - service: script.my_notify
        data:
          title: "üÜï Nuovo Aggiornamento Home Assistant"
          message: "Home Assistant {{ state_attr('binary_sensor.updater','newest_version') }} √® disponibile."
          link: "[Release Notes]({{ state_attr('binary_sensor.updater','release_notes') }})"

  #----------------------------------------------------------------------------------------------------#
  # Benvenuto # Esempio Macro elaborata al di fuori di build_message, dove al suo interno va inserito {{ benvenuto|default }}
  #----------------------------------------------------------------------------------------------------#
  - alias: Benvenuto
    description: "Welcome Message"
    mode: queued
    initial_state: true
    trigger:
      - platform: state
        entity_id: person.claudio
        to: "home"
        for: "00:02:00"
    action:
      - service: script.my_notify
        data:
          call_no_annuncio: 1
          google: true
          alexa:
            type: announce
          title: Benvenuto
          benvenuto: >
            {% set person = trigger.entity_id.split('.')[1] | replace('_', ' ') | capitalize %}
            {%- macro benvenuto(person) -%}
            {{ [
            "Bentornato a casa " ~person~" ",
            "Indovina chi √® a casa? √® " ~person~" ",
            person + " √® ora in casa. ",
            "Benvenuto a casa " ~person~". Ci sei mancato. ",
            "La nostra casa √® ora completa, riposati e rilassati!. Bentornato " ~person~" ",
            "La vita √® come una canzone, sei di nuovo al posto tuo. Benvenuto a casa " ~person~" ",
            "Ehil√†!. " ~person~ " Benvenuto a casa!. ",
            "Toc toc. Chi c'√® qui? √® " ~person~" ",
            person~ "!. Tu sei a casa!.",
            "Conosco un segreto!. " ~person~ " √® a casa!. ",
            "Sto percependo un disturbo nella forza.. " ~person~ " deve essere a casa!. ",
            "E la casa diventa una casa. Bentornato. " ~person~" ",
            person~ " √® qui ora. Benvenuto a casa. ",
            person~ " √® ora qui. ",
            "Solo un piccolo annuncio. " ~person~ " √® arrivato!. ",
            "Perdonate l'interruzione, ma " ~person~ " √® a casa!. ",
            "I miei sistemi stanno rilevando la presenza di ulteriori umani. " ~person~ " √® stato identificato come: in casa. "
            "Bentornato "~person~"!. La casa si sta attivando!. ",
            "Benvenuto a casa "~person~"!. √à bello rivederti!. Lasciami accendere la casa. ",
            "Beh, sembra che "~person~" sia finalmente a casa!. Preparer√≤ la casa per te. ",
            "√à bello vedere che sei tornato sano e salvo "~person~"!. Lasciami aprire la porta e preparare la casa. ",
            "Fantastico, "~person~" √® tornato!. Permettimi di preparare la casa per te. "
            ] | random }}
            {%- endmacro -%}
            {{ benvenuto(person) }}

  #----------------------------------------------------------------------------------------------------#
  # Bentronato # Esempio Call di Bentornato [ if call_bentornato == 1 Macro {{ bentornato(person) }} ]
  #----------------------------------------------------------------------------------------------------#
  - alias: Bentornato Hub
    mode: queued
    initial_state: true
    trigger:
      - platform: state
        entity_id: person.claudio
        to: "home"
        for: "00:02:00"
    action:
      - service: script.my_notify
        data:
          alexa:
            type: announce
          google: true
          call_no_annuncio: 1
          call_bentornato: 1
          title: Bentornato
          person: >-
            {{ trigger.to_state.attributes.friendly_name }}

  #----------------------------------------------------------------------------------------------------#
  # Lavoro/Zone # Esempio Call di Inizio/Fine lavoro [ if call_fine_lavoro == 1 {{ fine_lavoro(person) }} ]
  #----------------------------------------------------------------------------------------------------#
  - alias: Notifica Inzio Lavoro Hub
    initial_state: true
    trigger:
      platform: state
      entity_id: person.claudio
      to: "Lavoro"
    action:
      - service: script.my_notify
        data:
          alexa:
            type: tts
          call_no_annuncio: 1
          call_inizio_lavoro: 1
          title: "In Ufficio"
          person: >-
            {{ trigger.to_state.attributes.friendly_name }}

  - alias: Notifica Fine Lavoro Hub
    initial_state: true
    trigger:
      platform: state
      entity_id: person.claudio
      from: "Lavoro"
      to: "not_home"
    action:
      - service: script.my_notify
        data:
          alexa:
            type: tts
          call_no_annuncio: 1
          call_fine_lavoro: 1
          title: "Fine Lavoro"
          person: >-
            {{ trigger.to_state.attributes.friendly_name }}

  #----------------------------------------------------------------------------------------------------#
  # Nuovo Dispositivo Connesso
  #----------------------------------------------------------------------------------------------------#
  - alias: Nuovo Dispositivo Connesso Hub
    mode: queued
    initial_state: true
    trigger:
      - platform: event
        event_type: device_tracker_new_device
    action:
      - service: script.my_notify
        data:
          alexa:
            type: tts
          call_nuovo_dispositivo: 1
          title: "Nuovo Dispositivo"
          person: >-
            {% if trigger.event.data.host_name != None %}
            {{ trigger.event.data.host_name }}
            {% else %}
            Sconosciuto
            {% endif %}
      - service: notify.pushover
        data:
          title: New device
          message: |
            New device: {{ trigger.event.data.host_name }}
            entity: {{ trigger.event.data.entity_id }}
            mac: ({{ trigger.event.data.mac }})

  #----------------------------------------------------------------------------------------------------#
  # Avvio Computer
  #----------------------------------------------------------------------------------------------------#
  - alias: Computer ON Hub
    initial_state: true
    trigger:
      platform: state
      entity_id: switch.computer
      to: "on"
    action:
      service: script.my_notify
      data:
        title: "Computer attivo"
        message: "Roger! Il computer √® attivo. "
        alexa: True
        google: True

  #----------------------------------------------------------------------------------------------------#
  # Condizioni Climatiche
  #----------------------------------------------------------------------------------------------------#
  - alias: Condizioni Tempo Dopo Lavoro Hub
    initial_state: true
    trigger:
      - platform: time
        at: "16:00:00"
    condition:
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
      - condition: and
        conditions:
          - condition: numeric_state
            entity_id: "sensor.dark_sky_precip_intensity"
            above: 0.5
    action:
      - service: script.my_notify
        data:
          alexa:
            type: tts
          call_avviso_pioggia: 1
          evento: "Dopo Lavoro"
          sensore_pioggia: >-
            {{ states('sensor.dark_sky_precip_intensity') | round(2)~" "~state_attr('sensor.dark_sky_precip_intensity', 'unit_of_measurement') }}

  #----------------------------------------------------------------------------------------------------#
  # Buongiorno Info
  #----------------------------------------------------------------------------------------------------#
  - alias: Buongiorno Info Hub
    initial_state: true
    trigger:
      - platform: time
        at: "07:45:00"
    condition:
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
          - sat
    action:
      - service: script.my_notify
        data:
          message: |
            Sono le {{ states('sensor.time') }}, 
            ed √® {{ states('sensor.dark_sky_summary') }}. 
            La temperatura esterna √® di {{ states('sensor.dark_sky_apparent_temperature') | int }} gradi, 
            mentre la temperatura interna √® di {{ states('sensor.temperatura_media') | int }} gradi. 
            *Previsioni.* {{ states('sensor.dark_sky_hourly_summary') }} 
            *Citazione.* {{ state_attr('sensor.feed_wikiquote', 'entries')[-1].summary | striptags }}.
      - delay: "00:01:00"
      - service: script.my_notify
        data:
          notify: false
          alexa:
            media_content_id: Alexa.GoodMorning.Play
            media_content_type: sequence

  #----------------------------------------------------------------------------------------------------#
  # SEGUIMI - Imposta il Media Player in automatico
  #----------------------------------------------------------------------------------------------------#
  - alias: Seguimi Hub
    mode: restart
    max_exceeded: silent
    trigger:
      platform: state
      entity_id:
        - binary_sensor.motion_sensor_158d000222ccb7 #studio
        # - binary_sensor.motion_sensor_158d0001e5cfdd #corridoio
        - binary_sensor.pir_corridoio
        - binary_sensor.pir_sala
        - binary_sensor.cam_sala
      from: "off"
      to: "on"
    action:
      - variables:
          studio: "{{ is_state('binary_sensor.motion_sensor_158d000222ccb7', 'on') }}"
          corridoio: "{{ is_state('binary_sensor.pir_corridoio', 'on') }}"
          sala: "{{ is_state('binary_sensor.pir_sala', 'on') or is_state('binary_sensor.cam_sala', 'on') }}"
      - service: input_select.select_option
        entity_id: input_select.notification_media_player_alexa
        data:
          option: >-
            {% if studio %} Studio
            {% elif sala %} Sala
            {% else %} Gruppo Alexa {% endif %}
      - service: input_select.select_option
        entity_id: input_select.notification_media_player_google
        data:
          option: >-
            {% if studio %} Red
            {% elif sala %} Black
            {% elif corridoio %} Black due
            {% else %} Gruppo Google {% endif %}

  #----------------------------------------------------------------------------------------------------#
  # HACS - Updates
  #----------------------------------------------------------------------------------------------------#
  - alias: HACS Updates Hub
    mode: queued
    trigger:
      - platform: state
        entity_id: sensor.hacs
      - platform: event
        event_type: hacs/repository
        event_data:
          action: registration
    max_exceeded: silent
    max: 50
    action:
      - choose:
          - conditions:
              - "{{ trigger.entity_id is defined }}"
              - "{{ states(trigger.entity_id) != 'unknown' }}"
              - "{{ states(trigger.entity_id) != '0' }}"
            sequence:
              - service: script.my_notify
                data:
                  call_no_annuncio: 1
                  title: >-
                    Aggiornamenti HACS ({{states('sensor.hacs')}})
                  message: |
                    Nuovi Aggiornamenti HACS:
                  alexa:
                    message_tts: >-
                      Ci sono {{states('sensor.hacs')}} aggiornamenti in HACS.
                  link: |
                    {{"\n"}}
                    {% for repo in state_attr(trigger.entity_id, 'repositories') %}
                    [{{ repo.display_name }}](https://github.com/{{ repo.name }}) {{ repo["installed_version"] }} -> {{ repo["available_version"] }}
                    {% endfor %}
          # - choose:
          - conditions:
              - "{{ trigger.event is defined }}"
              - "{{ trigger.event.data.repository is defined }}"
            sequence:
              - service: script.my_notify
                data:
                  title: Nuovo repository in HACS
                  message: |
                    Nuovo Repository aggiunto.
                  link: |
                    {% set repo = trigger.event.data.repository %}
                    [{{ repo }}](https://github.com/{{ repo }})
        # default:
        #   - service: script.my_notify
        #     data:
        #       message: " HACS: {{trigger.description}}"

  #----------------------------------------------------------------------------------------------------#
  # ALEXA - Riautenticazione - Login
  #----------------------------------------------------------------------------------------------------#
  - alias: Alexa Authentication Required Hub
    trigger:
      platform: event
      event_type: alexa_media_relogin_required
    action:
      - variables:
          external_url: !secret external_url
      - service: script.my_notify
        data:
          call_no_annuncio: 1
          title: üîë Alexa Media Integrazione
          message: Autenticazione Richiesta
          notify: pushover,telegram
          link: "[Integrazioni]({{ external_url }}/config/integrations)"
          # link Markdown --> [Nome link](LINK)
          # link html     --> <a href="LINK">"Nome link"</a>

  #----------------------------------------------------------------------------------------------------#
  # Notifica Person location - No Entities
  #----------------------------------------------------------------------------------------------------#
  - alias: Notifica Person location Hub
    initial_state: true
    trigger:
      - platform: event
        event_type: state_changed
    condition:
      # - "{{ trigger.event.data.entity_id.startswith('person') }}"
      - "{{ trigger.event.data.new_state.domain == 'person' }}"
      - "{{ trigger.event.data.old_state.state != states(trigger.event.data.entity_id) }}"
      - "{{ 'latitude' in trigger.event.data.new_state.attributes }}"
    action:
      - variables:
          lat: "{{ trigger.event.data.new_state.attributes.latitude }}"
          long: "{{ trigger.event.data.new_state.attributes.longitude }}"
          from: "{{ trigger.event.data.old_state.state if trigger.event.data.old_state is not none else 'sconosciuto' }}"
          to: "{{ trigger.event.data.new_state.state }}"
          name: "{{ state_attr(trigger.event.data.entity_id, 'friendly_name') }}"
      - service: script.my_notify
        data:
          alexa: true
          title: "üìç Location {{name}}"
          message: >
            {% set state_dict = {'home': 'Casa', 'not_home': 'Fuori Casa'} %}
            {% set from = state_dict.get(from, from) %}
            {% set to = state_dict.get(to, to) %}
            {{ name }} si √® spostato da {{ from }} a {{ to }}
      - choose:
          - conditions: "{{ not to in 'home' and lat != '' }}"
            sequence:
              - service: telegram_bot.send_location
                data:
                  disable_notification: true
                  latitude: "{{ lat }}"
                  longitude: "{{ long }}"

  #----------------------------------------------------------------------------------------------------#
  # Notifica Person location with entity_id
  #----------------------------------------------------------------------------------------------------#
  # - alias: Notifica Person location
  #   initial_state: true
  #   trigger:
  #     - platform: state
  #       entity_id:
  #         - person.claudio
  #   condition:
  #     - "{{ trigger.to_state is not none }}"
  #     - "{{ (trigger.to_state.state != trigger.from_state.state) }}"
  #   action:
  #     - variables:
  #         lat: "{{ trigger.to_state.attributes.latitude }}" # "{{ state_attr(trigger.entity_id, 'latitude') }}" #
  #         long: "{{ trigger.to_state.attributes.longitude }}" # "{{ state_attr(trigger.entity_id, 'longitude') }}" #
  #         from: "{{ trigger.from_state.state if trigger.from_state is not none else 'sconosciuto' }}"
  #         to: "{{ trigger.to_state.state }}"
  #         name: "{{ trigger.to_state.name }}"
  #     - service: script.my_notify
  #       data:
  #         alexa: true
  #         title: "üìç Location {{ name }}"
  #         message: >
  #           {% set state_dict = {'home': 'Casa', 'not_home': 'Fuori Casa'} %}
  #           {% set from = state_dict.get(from, from) %}
  #           {% set to = state_dict.get(to, to) %}
  #           {{ name }} si √® spostato da {{ from }} a {{ to }}
  #         link: >
  #           {% if lat and not to in 'home' %}
  #           [Mappa](https://www.openstreetmap.org/?mlat={{ lat }}&mlon={{ long }}#map=8/{{ lat }}/{{ long }})
  #           {% endif %}

  #----------------------------------------------------------------------------------------------------#
  # Notifica Cambio Stagione
  #----------------------------------------------------------------------------------------------------#
  - alias: Notifica Cambio Stagione hub
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.season
    condition:
      - "{{ trigger.from_state is defined }}"
    action:
      - variables:
          from: "{{ trigger.from_state.state if trigger.from_state is defined }}"
          to: "{{ states('sensor.season') }}"
      - service: script.my_notify
        data:
          message: >
            {% set state_dict = {
              'spring': 'Primavera',
              'summer': 'Estate',
              'autumn': 'Autunno',
              'winter': 'Inverno'
            } %}
            {% set from = state_dict.get(from, from) %}
            {% set to = state_dict.get(to, to) %}
            Arrivederci {{ from }} e Salutiamo la Stagione {{ to }}!

  #----------------------------------------------------------------------------------------------------#
  # Addon Home Assistant Google Drive Backup https://github.com/sabeechen/hassio-google-drive-backup
  #----------------------------------------------------------------------------------------------------#
  - alias: Home Assistant Google Drive Backup Hub
    initial_state: true
    # mode: queued
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: binary_sensor.backups_stale
        id: "backups_stale"
      - platform: state
        entity_id: sensor.backup_state
        attribute: last_uploaded
        id: "backup_state"
    condition: 
        - "{{ trigger.from_state is not none }}"
    action:
      - choose:
        - conditions: 
            - "{{ 'backup_state' in trigger.id }}"
          sequence:
            - variables:
                ENTITY: "{{ trigger.entity_id }}"
            - service: script.my_notify
              data:
                title: "Stato Backup"
                message: |
                  Stato : {{ states(ENTITY)}}
                  Data Backup: {{ as_local(as_datetime(state_attr(ENTITY, 'last_backup'))) }}
                  Data Upload: {{ as_local(as_datetime(state_attr(ENTITY, 'last_uploaded'))) }}
                  N. su Drive: {{ state_attr(ENTITY, 'backups_in_google_drive') }}
                  Dimensione : {{ state_attr(ENTITY, 'size_in_google_drive') }}
                  N. in Local: {{ state_attr(ENTITY, 'backups_in_home_assistant') }}
                  Dimensione : {{ state_attr(ENTITY, 'size_in_home_assistant') }}

                  {% set backups = state_attr(ENTITY, 'backups') %}
                  {% if backups %}
                  Backups:
                  {# for last backup only add filter -> if bkp.date == state_attr(ENTITY, 'last_backup') #}
                  {% for bkp in backups %}
                  ‚û° Nome : {{ bkp.name }}
                    Data : {{ as_local(as_datetime(bkp.date)) }}
                    {# Ora: {{ as_timestamp(bkp.date) | timestamp_custom('%X') }} #}
                    Stato: {{ bkp.state }} 
                    Dimen: {{ bkp.size }} 
                    Slug : {{ bkp.slug }}
                  {% endfor %}
                  {% endif %}

                  Caricato in: {{ utcnow() - as_datetime(state_attr(ENTITY, 'last_backup')) }}
      - choose:
        - conditions: 
            - "{{ 'backups_stale' in trigger.id }}"
          sequence:
            - service: script.my_notify
              data:
                title: "Problemi Google Drive Backup"
                message: >
                  {% if trigger.to_state.state == 'on' %}
                  Problemi con Google Drive BackUp
                  {% else %}
                  Risolto problemi Google Drive BackUp
                  {% endif %}
