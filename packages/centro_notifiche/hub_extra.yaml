#######################################-#######################################
##                                 CUSTOMIZE
#######################################-#######################################
homeassistant:
  customize:
    ## NODE ANCHORS
    package.node_anchors:
      customize: &customize
        package: Centro Notifiche 🔔
        site: hassiohelp.eu 🌐
        author: Caio & Gianpi
        version: Extra 3.2.0

      expose: &expose
        <<: *customize
        haaska_hidden: false
        homebridge_hidden: false

    ## AUTOMATION
    automation.auto_volume_hub:
      <<: *customize
      friendly_name: Volume Automatico Hub
    automation.hub_initialization_at_startup:
      <<: *customize
      friendly_name: Startup HUB
    ## GROUP
    group.automations_notification_hub:
      <<: *customize
      friendly_name: Automazioni HUB
      icon: mdi:account-tie
    group.location_tracker:
      <<: *customize
      friendly_name: Dispositivi tracciati
      icon: mdi:target-account
    group.media_player_alexa:
      <<: *customize
      friendly_name: Gruppo Alexa
      icon: mdi:speaker-multiple
    group.media_player_google:
      <<: *customize
      friendly_name: Gruppo Google
      icon: mdi:speaker-multiple
#######################################-#######################################
##                                 AUTOMATION
#######################################-#######################################
automation:
  #----------------------------------------------------------------------------------------------------#
  # INITIALIZE
  #----------------------------------------------------------------------------------------------------#
  - alias: Hub initialization at startup
    initial_state: true
    trigger:
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: automation.hub_initialization_at_startup
        to: "on"
    action:
      # Crea un Gruppo location_tracker da entity Person.
      - service: group.set
        data:
          object_id: location_tracker
          entities: >-
            {{states.person|join(',','entity_id')}}
      - service: system_log.write
        data:
          message: "Successfully set location_tracker group."
          level: info

      - choose:
          - conditions: "{{state_attr('input_select.notification_media_player_alexa', 'options') is not none }}"
            sequence:
              # Crea un Gruppo media_player_alexa da entity input_select.notification_media_player_alexa.
              - service: group.set
                data:
                  object_id: media_player_alexa
                  entities: >-
                    {% set lista_alexa = expand('input_select.notification_media_player_alexa')|join(',','attributes.options') %}
                    {{ states.media_player 
                    | selectattr('attributes.friendly_name', 'defined')
                    | selectattr('attributes.friendly_name', 'in', lista_alexa)
                    | map(attribute='entity_id')|list
                    }}
              - service: system_log.write
                data:
                  message: "Successfully set media_player_alexa group."
                  level: info

      - choose:
          - conditions: "{{state_attr('input_select.notification_media_player_google', 'options') is not none }}"
            sequence:
              # Crea un Gruppo media_player_google da entity input_select.notification_media_player_google.
              - service: group.set
                data:
                  object_id: media_player_google
                  entities: >-
                    {% set lista_google = expand('input_select.notification_media_player_google')|join(',','attributes.options') %}
                    {{ states.media_player 
                    | selectattr('attributes.friendly_name', 'defined')
                    | selectattr('attributes.friendly_name', 'in', lista_google)
                    | map(attribute='entity_id')|list
                    }}
              - service: system_log.write
                data:
                  message: "Successfully set media_player_google group."
                  level: info

      # Crea un Gruppo Notifiche se l'attributo "id:" o il "nome" delle automazioni finiscono con "hub".
      - service: group.set
        data:
          object_id: "automations_notification_hub"
          entities: >
            {%for item in states.automation if ((item.attributes.id|lower).endswith('hub'))
            or ((item.attributes.friendly_name|lower).endswith('hub')) %}
            {{-item.entity_id}}{%if not loop.last%},{%endif-%}{%endfor%}

      # Execute auto_volume_hub Automation.
      - service: automation.trigger
        entity_id: automation.auto_volume_hub
        # skip_condition: true

      - service: system_log.write
        data:
          message: "Successfully END INITIALIZE."
          level: info

  #----------------------------------------------------------------------------------------------------#
  # Automatic Volume - Media player volume adjustment, based on period_of_day_volume sensor
  #----------------------------------------------------------------------------------------------------#
  - alias: Auto Volume Hub
    mode: queued
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.period_of_day_volume
    action:
      - variables:
          group_alexa: "{{state_attr('group.media_player_alexa', 'entity_id')}}"
          group_google: "{{state_attr('group.media_player_google', 'entity_id')}}"
          list_alexa: "{{ group_alexa if states.input_boolean.alexa_switch else none}}" # return string!! Old type legacy
          list_google: "{{group_google if states.input_boolean.google_switch else none}}"
          all_entity: "{{(list_alexa|default((), true) + list_google|default((), true))|reject('sameas', none)|list}}"
          volume: "{{states('sensor.period_of_day_volume')|float}}"
      - choose:
          - conditions: "{{list_alexa is not none}}"
            sequence:
              - service: notify.alexa_media
                data:
                  data:
                    type: tts
                  target: "{{list_alexa}}"
                  message: >
                    <speak>
                    <break time="4s"/>
                    <prosody volume="silent">volume</prosody>
                    </speak>
              - delay: "00:00:02"
      - choose:
          - conditions: "{{all_entity is not none}}"
            sequence:
              - service: media_player.volume_set
                data:
                  entity_id: "{{all_entity}}"
                  volume_level: "{{(volume|round(2))/100}}"
              - service: input_number.set_value
                data:
                  entity_id:
                    - input_number.intercom_message_volume
                    - input_number.default_restore_volume
                  value: "{{volume}}"
              - service: system_log.write
                data:
                  message: "Successfully set Auto Volume Hub."
                  level: info

  # ATTENZIONE!
  # Se le automazioni sono create manualmente con id, la loro eliminazione va fatta manualmente dalla UI
  # Interfaccia grafica --> impostazioni/entità cerca le entità per "ripristinato" o "non disponibile".
  # O in Stati metti "automation." in Filter entities e "unavailable" Filter States.

  # ATTENTION!
  # If automations are created manually with id, their deletion must be done manually from the UI
  # Graphical interface -> settings/entities searches for entities for "restored" or "unavailable".
  # Or in States put "automation." in the entities filter and "unavailable" in the states filter
