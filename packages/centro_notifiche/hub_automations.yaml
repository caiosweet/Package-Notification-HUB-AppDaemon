#----------------------------------------------------------------------------------------------------#
# ESEMPI DI COME CREARE DELLE AUTOMAZIONI CON I RICHIAMI ALLE MACRO
#----------------------------------------------------------------------------------------------------#
automation:
  #----------------------------------------------------------------------------------------------------#
  # Home Assistant Start/Final Write/Close/Stop/Restart
  #----------------------------------------------------------------------------------------------------#
  - alias: Home Assistant Start Stop Hub
    description: 'Notification Home Assistant Start/Final Write/Close/Stop/Restart'
    initial_state: true
    mode: queued
    max_exceeded: silent
    trigger:
    - platform: homeassistant
      event: start
    - platform: homeassistant
      event: shutdown
    - platform: event
      event_type: homeassistant_final_write
    - platform: event
      event_type: homeassistant_close
    - platform: event
      event_type: call_service
      event_data:
        domain: homeassistant
        service: restart
    variables:
      notification_service: "{{states('input_select.text_notify')|lower}}"
    action:
    - variables:
        title: '{{trigger.description|regex_replace(find="\W|_|event", replace=" ")|trim|capitalize}}'
        time: "{{(now().time()|string)[:-4]}}"
        icon: >
          {% if 'stop' in title %}🛑
          {% elif 'final' in title %}🛡️
          {% elif 'close' in title %}⛔
          {% elif 'start' in title %}👍
          {% else %}📞
          {% endif %}
    - choose:
      - conditions: "{{title is defined}}"
        sequence:
          - service: "notify.{{notification_service}}"
            data:
              title: "{{icon}} {{title}}"
              message: |
                ➡️ {{time}}
          - choose:
            - conditions: "{{'start' in title}}"
              sequence:
                - service: homeassistant.update_entity
                  entity_id: sensor.ha_start
                - wait_for_trigger:
                    - platform: state
                      entity_id: sensor.centro_notifiche
                      to: 'on'
                  timeout: 60
                  continue_on_timeout: true
                - service: script.my_notify
                  data:
                    title: "HomeAssistant Start!"
                    notify: "{{notification_service}}"
                    message: |
                      Centro Notifiche operativo! 👍
                      {{states('sensor.ha_start')}}
                    alexa:
                      message_tts: >-
                        Il sistema è operativo!.
                      voice: Giorgio
                      type: tts
                    google: 
                      media_content_id: https://actions.google.com/sounds/v1/human_voices/human_fart.ogg
                      # media_content_type: sound
      default:
        - service: "notify.{{notification_service}}"
          data:
            message: " DEFAULT: {{icon}} {{title}}"

      # default:
      #   - service: script.my_notify
      #     data: #trigger.event.data.service == restart
      #       title: "👋 Home Assistant!"
      #       message: "{{time}}"
      #       call_no_annuncio: 1
      #       call_arrivederci: 1
      #       call_spegni: 1
      
  #----------------------------------------------------------------------------------------------------#
  # Accesso Fallito # Banned IP persistent_notification.ip_ban title: Banning IP address
  # message: Too many login attempts from xxx.xxx.xxx.xxx
  #----------------------------------------------------------------------------------------------------#
  - alias: Accesso Fallito Hub
    description: 'Notification Message Too many login attempts'
    mode: queued
    initial_state: true
    trigger:
      - platform: state
        entity_id: persistent_notification.http_login
    condition: "{{ trigger.to_state.state != 'None' and trigger.to_state.entity_id is defined}}"
    action:
      - service: script.my_notify
        data:
          title: "⛔ Home Assistant Accesso Fallito. "
          message_tts: &tts_login "Attenzione. Accesso Fallito"
          message: "Tentativo di accesso o richiesta con autenticazione non valida."
          link: >-
            {% set message = state_attr('persistent_notification.http_login','message') %}
            {{'http://www.ip-tracker.org/locator/ip-lookup.php?ip=' ~ message.split('from ')[1] if message }}
          # notify: alert
          priority: 1
          alexa:
            message_tts: *tts_login

      - service: notify.pushover
        data: 
          title: "⛔ Home Assistant Accesso Fallito"
          message: "Accesso Fallito. "
          data:
            url: >
              {% set message = state_attr('persistent_notification.http_login','message') %}
              {{'https://whatismyipaddress.com/ip/' ~ message.split('from ')[1] if message }}
            priority: 1
            #attachment: "http://example.com/image.png"
            #sound: pianobar
            #device: pixel

      #- service: persistent_notification.dismiss
        #data:
          #notification_id: 'http_login'

  #----------------------------------------------------------------------------------------------------#
  # Nuova versione di Home Assistant
  #----------------------------------------------------------------------------------------------------#
  - alias: Update Home Assistant Hub
    description: 'Notification New Update for Home Assistant'
    initial_state: true
    trigger:
      # - platform: state
      #   entity_id: updater.updater
      - platform: state
        entity_id: binary_sensor.updater
        to: 'on'
    action:
      - service: script.my_notify
        data:
          title: "🆕 Nuovo Aggiornamento Home Assistant"
          message: "Home Assistant {{state_attr('binary_sensor.updater','newest_version')}} è disponibile."
          link: "{{state_attr('binary_sensor.updater','release_notes')}}"

  #----------------------------------------------------------------------------------------------------#
  # Benvenuto # Esempio Macro elaborata al di fuori di build_message, dove al suo interno va inserito {{ benvenuto }}
  #----------------------------------------------------------------------------------------------------#
  - alias: Benvenuto
    description: "Welcome Message"
    mode: queued
    initial_state: true
    trigger:
      - platform: state
        entity_id: !secret location_tracker_hub
        from: 'not_home'
        to: 'home'
        for: '00:02:00'
    action:
      - service: script.my_notify
        data:
          call_no_annuncio: 1
          alexa:
            type: announce
          title: Benvenuto
          benvenuto: >
            {% set person = trigger.entity_id.split('.')[1]|replace('_', ' ')|capitalize %}
            {%- macro benvenuto(person) -%}
            {{ [
            "Bentornato a casa " ~person~" ",
            "Indovina chi è a casa? è " ~person~" ",
            person + " è ora in casa. ",
            "Benvenuto a casa " ~person~". Ci sei mancato. ",
            "La nostra casa è ora completa, riposati e rilassati!. Bentornato " ~person~" ",
            "La vita è come una canzone, sei di nuovo al posto tuo. Benvenuto a casa " ~person~" ",
            "Ehilà!. " ~person~ " Benvenuto a casa!. ",
            "Toc toc. Chi c'è qui? è " ~person~" ",
            person~ "!. Tu sei a casa!.",
            "Conosco un segreto!. " ~person~ " è a casa!. ",
            "Sto percependo un disturbo nella forza.. " ~person~ " deve essere a casa!. ",
            "E la casa diventa una casa. Bentornato. " ~person~" ",
            person~ " è qui ora. Benvenuto a casa. ",
            person~ " è ora qui. ",
            "Solo un piccolo annuncio. " ~person~ " è arrivato!. ",
            "Perdonate l'interruzione, ma " ~person~ " è a casa!. ",
            "I miei sistemi stanno rilevando la presenza di ulteriori umani. " ~person~ " è stato identificato come: in casa. "
            "Bentornato "~person~"!. La casa si sta attivando!. ",
            "Benvenuto a casa "~person~"!. È bello rivederti!. Lasciami accendere la casa. ",
            "Beh, sembra che "~person~" sia finalmente a casa!. Preparerò la casa per te. ",
            "È bello vedere che sei tornato sano e salvo "~person~"!. Lasciami aprire la porta e preparare la casa. ",
            "Fantastico, "~person~" è tornato!. Permettimi di preparare la casa per te. "
            ] | random }}
            {%- endmacro -%}
            {{ benvenuto(person) }}

  #----------------------------------------------------------------------------------------------------#
  # Bentronato # Esempio Call di Bentornato [ if call_bentornato == 1 Macro {{ bentornato(person) }} ]
  #----------------------------------------------------------------------------------------------------#
  - alias: Bentornato Hub
    mode: queued
    initial_state: true
    trigger:
      - platform: state
        entity_id: !secret location_tracker_hub
        from: 'not_home'
        to: 'home'
        for: '00:02:00'
    action:
      - service: script.my_notify
        data:
          alexa:
            type: announce
          call_no_annuncio: 1
          call_bentornato: 1
          title: Bentornato
          person: >-
            {{ trigger.to_state.attributes.friendly_name }}

  #----------------------------------------------------------------------------------------------------#
  # Lavoro/Zone # Esempio Call di Inizio/Fine lavoro [ if call_fine_lavoro == 1 {{ fine_lavoro(person) }} ]
  #----------------------------------------------------------------------------------------------------#
  - alias: Notifica Inzio Lavoro Hub
    initial_state: true
    trigger:
      platform: state
      entity_id: !secret location_tracker_hub
      to: "Lavoro"
    action:
      - service: script.my_notify
        data:
          alexa:
            type: tts
          call_no_annuncio: 1
          call_inizio_lavoro: 1
          title: "In Ufficio"
          person: >-
            {{ trigger.to_state.attributes.friendly_name }}

  - alias: Notifica Fine Lavoro Hub
    initial_state: true
    trigger:
      platform: state
      entity_id: !secret location_tracker_hub
      from: "Lavoro"
      to: "not_home"
    action:
      - service: script.my_notify
        data:
          alexa:
            type: tts
          call_no_annuncio: 1
          call_fine_lavoro: 1
          title: "Fine Lavoro"
          person: >-
            {{ trigger.to_state.attributes.friendly_name }}

  #----------------------------------------------------------------------------------------------------#
  # Nuovo Dispositivo Connesso
  #----------------------------------------------------------------------------------------------------#
  - alias: Nuovo Dispositivo Connesso Hub
    mode: queued
    initial_state: true
    trigger:
      - platform: event
        event_type: device_tracker_new_device
    action:
      - service: script.my_notify
        data:
          alexa:
            type: tts
          call_nuovo_dispositivo: 1
          title: "Nuovo Dispositivo"
          person: >-
            {% if trigger.event.data.host_name != None %}
            {{ trigger.event.data.host_name }}
            {% else %}
            Sconosciuto
            {% endif %}
      - service: notify.pushover
        data:
          title: New device
          message: |
            New device: {{trigger.event.data.host_name}}
            entity: {{trigger.event.data.entity_id}}
            mac: ({{ trigger.event.data.mac }})

  #----------------------------------------------------------------------------------------------------#
  # Avvio Computer
  #----------------------------------------------------------------------------------------------------#
  - alias: Computer ON Hub
    initial_state: true
    trigger:
      platform: state
      entity_id: switch.computer
      to: 'on'
    action:
      service: script.my_notify
      data:
        title: "Computer attivo"
        message: "Roger! Il computer è attivo. "
        alexa:
          mode: true
        google:
          mode: true

  #----------------------------------------------------------------------------------------------------#
  # Condizioni Climatiche
  #----------------------------------------------------------------------------------------------------#
  - alias: Condizioni Tempo Dopo Lavoro Hub
    initial_state: true
    trigger:
      - platform: time
        at: '16:00:00'
    condition:
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
      - condition: and
        conditions:
          - condition: numeric_state
            entity_id: 'sensor.dark_sky_precip_intensity'
            above: 0.5
    action:
      - service: script.my_notify
        data:
          alexa:
            type: tts
          call_avviso_pioggia: 1
          evento: "Dopo Lavoro"
          sensore_pioggia: >-
            {{states.sensor.dark_sky_precip_intensity.state|round(2)~" "~states.sensor.dark_sky_precip_intensity.attributes.unit_of_measurement}}

  #----------------------------------------------------------------------------------------------------#
  # Buongiorno Info
  #----------------------------------------------------------------------------------------------------#
  - alias: Buongiorno Info Hub
    initial_state: true
    trigger:
      - platform: time
        at: '07:45:00'
    condition:
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
          - sat
    action:
      - service: script.my_notify
        data:
          message: |
            Sono le {{states('sensor.time')}}, 
            ed è {{states('sensor.dark_sky_summary')}}. 
            La temperatura esterna è di {{states('sensor.dark_sky_apparent_temperature')|int}} gradi, 
            mentre la temperatura interna è di {{states('sensor.temperatura_media') |int}} gradi. 
            *Previsioni.* {{states.sensor.dark_sky_hourly_summary.state}} 
            *Citazione.* {{state_attr('sensor.wikiquote', 'entries')[-1].summary|striptags}}.
      - delay: "00:01:00"
      - service: script.my_notify
        data:
          notify: false
          alexa:
            media_content_id: Alexa.GoodMorning.Play
            media_content_type: sequence

  #----------------------------------------------------------------------------------------------------#
  # SEGUIMI - Imposta il Media Player in automatico
  #----------------------------------------------------------------------------------------------------#
  - alias: Seguimi Hub
    mode: queued
    trigger:
      platform: state
      entity_id:
        - binary_sensor.motion_sensor_158d000222ccb7 #studio
        - binary_sensor.motion_sensor_158d0001e5cfdd #corridoio
        - binary_sensor.cam_sala
      from: "off"
      to: "on"
    action:
      - service: input_select.select_option
        entity_id: input_select.notification_media_player_alexa
        data:
          option: >-
            {% if is_state("binary_sensor.motion_sensor_158d000222ccb7", "on") %}
            Studio
            {% elif is_state("binary_sensor.cam_sala", "on") %}
            Sala
            {% else %} 
            Gruppo Alexa
            {% endif %}
      - service: input_select.select_option
        entity_id: input_select.notification_media_player_google
        data:
          option: >-
            {% if is_state("binary_sensor.motion_sensor_158d000222ccb7", "on") %}
            Red
            {% elif is_state("binary_sensor.cam_sala", "on") %}
            Black
            {% elif is_state("binary_sensor.motion_sensor_158d0001e5cfdd", "on") %}
            Black2
            {% endif %}

  #----------------------------------------------------------------------------------------------------#
  # HACS - Updates
  #----------------------------------------------------------------------------------------------------#
  - alias: HACS Updates Hub
    mode: queued
    trigger:
      - platform: state
        entity_id: sensor.hacs
      - platform: event
        event_type: hacs/repository
        event_data:
          action: registration
    max_exceeded: silent
    max: 50
    action:
      - choose:
        - conditions:
            - "{{trigger.entity_id is defined}}"
            - "{{states(trigger.entity_id) != 'unknown'}}"
            - "{{(states(trigger.entity_id) | float) != 0}}"
          sequence:
            - service: script.my_notify
              data:
                call_no_annuncio: 1
                title: >-
                  Aggiornamenti HACS ({{states('sensor.hacs')}})
                message: >-
                  Nuovi Aggiornamenti HACS: 
                alexa:
                  message_tts: >-
                    Ci sono {{states('sensor.hacs')}} aggiornamenti in HACS.
                link: |-
                  {% for repo in state_attr(trigger.entity_id, 'repositories') %}
                  [{{repo.display_name}}](https://github.com/{{repo.name}}) {{repo["installed_version"]}} -> {{repo["available_version"]}}
                  {% endfor %}
      # - choose:
        - conditions:
            - "{{ trigger.event is defined }}"
            - "{{ trigger.event.data.repository is defined }}"
          sequence:
            - service: script.my_notify
              data:
                title: Nuovo repository in HACS
                message: |
                  Nuovo Repository aggiunto. 
                link: |
                  {% set repo = trigger.event.data.repository %}
                  [{{repo}}](https://github.com/{{repo}})
                #{% set id = trigger.event.data.repository_id %}
        default:
          - service: script.my_notify
            data:
              message: " HACS: {{trigger.description}}"

#            https://github.com/{{repo.name|replace("_","--")}}

  #----------------------------------------------------------------------------------------------------#
  # ALEXA - Riautenticazione - Login
  #----------------------------------------------------------------------------------------------------#
  - alias: Alexa Authentication Required Hub
    trigger:
      platform: event
      event_type: alexa_media_relogin_required
    action:
    - service: script.my_notify
      data:
        call_no_annuncio: 1
        title: 🔑 Alexa Media Integrazione
        message: Autenticazione Richiesta
        notify: pushover
        link: "[Integrazioni](http://192.168.1.3:8123/config/integrations)"

  #----------------------------------------------------------------------------------------------------#
  # HACS - Updater
  #----------------------------------------------------------------------------------------------------#
  # - id: hacs_updater_hub
  #   alias: "Notifica Aggiornamenti HACS"
  #   initial_state: true
  #   trigger:
  #     - platform: state
  #       entity_id: sensor.hacs
  #   condition:
  #     - condition: template
  #       value_template: "{{ trigger.to_state.state > trigger.from_state.state }}"
  #   action:
  #     - service: script.my_notify
  #       data:
  #         title: "HACS"
  #         message: >-
  #           Aggiornamenti plug-in disponibili. 
  #           {%set hacs=state_attr('sensor.hacs','repositories')%}
  #           {%set hacs_num=states('sensor.hacs')|int%}
  #           {%for n in range(0,hacs_num)%}
  #           *{{state_attr('sensor.hacs','repositories')[n]['display_name']}}* {{state_attr('sensor.hacs','repositories')[n]['available version']}}
  #           {%if not loop.last%}-{%endif%}
  #           {%endfor%}.

    # - service: mqtt.publish
    #   data:
    #     topic: '/dump2/{{ trigger.platform }}'
    #     retain: false
    #     payload: &template2 >-
    #       {%- for prop in trigger|sort if prop not in ['to_state', 'from_state'] -%}
    #         trigger.{{ prop }}: {{ trigger[prop] }}{{ '\n' }}
    #       {%- endfor -%}

    #       {%- for state in ['to_state', 'from_state'] if trigger[state] is defined -%}
    #         {{- '-' * 20 -}}{{ '\n' }}
    #         {%- for prop in ['state', 'entity_id', 'domain', 'object_id', 'name', 'last_updated', 'last_changed']|sort -%}
    #           trigger.{{ state }}.{{ prop }}: {{ trigger[state][prop] }}{{ '\n' }}
    #         {%- endfor -%}
    #         {%- for attr in trigger[state].attributes -%}
    #           trigger.{{ state }}.attributes.{{ attr }}: {{ trigger[state].attributes[attr] }}{{ '\n' }}
    #         {%- endfor -%}
    #       {%- endfor -%}

    # - service: notify.telegram
    #   data:
    #     title: "DUMP-2 --> {{trigger.description|replace('_','--')}}"
    #     message: |
    #       👍

    #       {%- for prop in trigger|sort if prop not in ['to_state', 'from_state'] -%}
    #         trigger.{{ prop |replace('_','--') }}: {{ trigger[prop] |replace('_','--')}}{{ '\n' }}
    #       {%- endfor -%}

    #       {%- for state in ['to_state', 'from_state'] if trigger[state] is defined -%}
    #         {{- '-' * 20 -}}{{ '\n' }}
    #         {%- for prop in ['state', 'entity_id', 'domain', 'object_id', 'name', 'last_updated', 'last_changed']|sort -%}
    #           trigger.{{ state |replace('_','--')}}.{{ prop |replace('_','--')}}: {{ trigger[state][prop] |replace('_','--')}}{{ '\n' }}
    #         {%- endfor -%}
    #         {%- for attr in trigger[state].attributes -%}
    #           trigger.{{ state |replace('_','--')}}.attributes.{{ attr |replace('_','--')}}: {{ trigger[state].attributes[attr] |replace('_','--')}}{{ '\n' }}
    #         {%- endfor -%}
    #       {%- endfor -%}

    # - service: script.my_notify
    #   data:
    #     title: "🟢 {{trigger.description|replace('_','--')}}"
    #     message: MY NOTIFY!

    # - service: homeassistant.update_entity
    #   entity_id: sensor.ha_start
    # - delay: 00:00:15
    # - service: script.my_notify
    #   data:
    #     title: "HomeAssistant Start!"
    #     message: |
    #       Il sistema è operativo!. 👍
    #       {{states('sensor.ha_start')}}
    #     alexa:
    #       message_tts: >-
    #         Il sistema è operativo!.
    #       voice: Giorgio
    #       type: announce
    #     google: 
    #       media_content_id: https://actions.google.com/sounds/v1/human_voices/human_fart.ogg
          #media_content_type: sound

  # - platform: sql
  #   queries:
  #     - name: Hassio Last Stop Date Time
  #       query: "SELECT * FROM 'events' WHERE event_type = 'homeassistant_stop' ORDER BY event_id DESC LIMIT 1;"
  #       column: 'time_fired'
      
  # - platform: sql
  #   queries:
  #     - name: Hassio Previous Start Date Time
  #       query: "SELECT * FROM 'events' WHERE event_type = 'homeassistant_started' ORDER BY event_id DESC LIMIT 1,1;"
  #       column: 'time_fired' 



    # - platform: event
    #   event_type: homeassistant_started
    # - platform: event
    #   event_type: homeassistant_start
    # - platform: event
    #   event_type: homeassistant.stop
    # - platform: event
    #   event_type: homeassistant.restart

      #homeassistant_started #homeassistant_start 
      # SERVICE--> #stop #restart 

    #   {
    #     "event_type": "call_service",
    #     "data": {
    #         "domain": "homeassistant",
    #         "service": "restart",
    #         "service_data": {}
    #     },
    #     "origin": "LOCAL",
    #     "time_fired": "2020-10-12T14:42:43.928865+00:00",
    #     "context": {
    #         "id": "2ff8ab260c9911eb99257f1f9134fd91",
    #         "parent_id": null,
    #         "user_id": "4bdea810ee35490da25048c512c4d5dc"
    #     }
    # }

  #----------------------------------------------------------------------------------------------------#
  # Home Assistant Shutdown
  #----------------------------------------------------------------------------------------------------#
  # - id: Shut Down HUB
  #   alias: Shut Down
  #   initial_state: true
  #   mode: queued
  #   trigger:
  #   # Trigger su evento restart, per dare il tempo ad AppDaemon di notificare
  #   - platform: event
  #     event_type: call_service
  #     event_data:
  #       domain: homeassistant
  #       service: restart
  #   # - platform: event
  #   #   event_type: call_service
  #   #   event_data:
  #   #     domain: homeassistant
  #   action:
  #     - service: script.my_notify
  #       data:
  #         title: "👋 Home Assistant!"
  #         # message: "descrizione: {{trigger.description|replace('_','--')}} \n event: {{trigger.event|replace('_','--')}}"
  #         call_no_annuncio: 1
  #         call_arrivederci: 1
  #         call_spegni: 1

  #----------------------------------------------------------------------------------------------------#
  # HACS - New Repo - by Joakim Sørensen (ludeeus)
  #----------------------------------------------------------------------------------------------------#
  # - id: hacs_new_repo_hub
  #   alias: Create a notification when somethig is added to HACS
  #   mode: queued
  #   trigger:
  #     platform: event
  #     event_type: hacs/repository
  #     event_data:
  #       action: registration
  #   condition: "{{ trigger.event.data.repository is defined }}"
  #   max_exceeded: silent
  #   max: 25
  #   action:
  #     service: script.my_notify
  #     data:
  #       title: Nuovo repository in HACS
  #       message: |
  #         Nuovo Repository aggiunto. 
  #       link: |
  #         {% set repo = trigger.event.data.repository %}
  #         {% set id = trigger.event.data.repository_id %}
  #         [{{repo}}](https://github.com/{{repo}})


      # - conditions: "{{'final' in trigger.description}}"
      #   sequence:
      #     - service: "notify.{{notification_service}}"
      #       data:
      #         title: "🛡️ {{title}}"
      #         message: |
      #           ➡️ {{time}}
      # - conditions: "{{'close' in trigger.description}}"
      #   sequence:
      #     - service: "notify.{{notification_service}}"
      #       data:
      #         title: "⛔ {{title}}"
      #         message: |
      #           ➡️ {{time}}
      # - conditions: "{{'start' in trigger.description}}"
      #   sequence:
      #     - service: "notify.{{notification_service}}"
      #       data:
      #         title: "👍 {{title}}"
      #         message: |
      #           ➡️ {{time}}